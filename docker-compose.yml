services:
  mariadb:
    image: mariadb:10.11
    container_name: wordpress_db
    restart: unless-stopped
    command: --max_allowed_packet=128M --query_cache_type=1 --query_cache_size=64M
    networks:
      - internal
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: mariadb
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 15s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7.4-alpine
    container_name: wordpress_redis
    restart: unless-stopped
    networks:
      - internal
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD-SHELL", "for i in $(seq 1 3); do redis-cli ping && exit 0 || sleep 5; done; exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3

  wordpress:
    build:
      context: ./wordpress
    container_name: wordpress_fpm
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - internal
    volumes:
      - wp_data:/var/www/html
    environment:
      WORDPRESS_DB_HOST: mariadb
      WORDPRESS_DB_USER: ${MYSQL_USER}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
      WORDPRESS_DB_NAME: mariadb
      WORDPRESS_TABLE_PREFIX: wp_
      WORDPRESS_DEBUG: true
      WP_REDIS_HOST: redis
      WP_REDIS_PORT: 6379
      WP_REDIS_DATABASE: 0
      WP_REDIS_TIMEOUT: 1
      WP_REDIS_READ_TIMEOUT: 1
      WP_REDIS_RETRY_INTERVAL: 3
    healthcheck:
      test: ["CMD-SHELL", "wp core is-installed --path=/var/www/html || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  nginx:
    image: nginx:1.28-alpine
    container_name: wordpress_nginx
    restart: unless-stopped
    depends_on:
      wordpress:
        condition: service_healthy
    networks:
      dokploy-network: {}
      internal:
        aliases:
          - cms.studyfriendly.com
    volumes:
      - wp_data:/var/www/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/wordpress.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_cache:/var/cache/nginx
    expose:
      - "80"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wordpress-router.rule=Host(`${FQDN}`)"
      - "traefik.http.routers.wordpress-router.entrypoints=websecure"
      - "traefik.http.routers.wordpress-router.tls.certresolver=letsencrypt"
      - "traefik.http.routers.wordpress-router.service=wordpress-service"
      - "traefik.http.services.wordpress-service.loadbalancer.server.port=80"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.X-Frame-Options=SAMEORIGIN"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Referrer-Policy=no-referrer-when-downgrade"
      - "traefik.http.middlewares.secure-headers.headers.customresponseheaders.Strict-Transport-Security=max-age=63072000; includeSubDomains; preload"
      - "traefik.http.routers.wordpress-router.middlewares=secure-headers@docker"

  clamav:
    image: clamav/clamav:1.3
    container_name: wordpress_clamav
    restart: unless-stopped
    networks:
      - internal
      - dokploy-network
    volumes:
      - wp_data:/scan:ro
      - clamav_data:/var/lib/clamav
    environment:
      CLAMSCAN_CRON: "0 2 * * *"
      CLAMSCAN_ARGS: "--infected --move=/var/lib/clamav/quarantine"
    user: "root"

  maldet:
    build:
      context: ./maldet
    container_name: wordpress_maldet
    restart: unless-stopped
    networks:
      - internal
      - dokploy-network
    volumes:
      - wp_data:/scan:ro
      - maldet_data:/usr/local/maldetect/quarantine
      - maldet_sigs:/usr/local/maldetect/sigs
    command: /usr/local/bin/run.sh

networks:
  dokploy-network:
    external: true
  internal:
    internal: true

volumes:
  db_data:
  wp_data:
  redis_data:
  nginx_cache:
  clamav_data:
  maldet_data:
  maldet_sigs:
